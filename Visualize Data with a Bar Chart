**Objective:** Build an app that is functionally similar to this: [https://bar-chart.freecodecamp.rocks](https://bar-chart.freecodecamp.rocks/).

Fulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.

You can use HTML, JavaScript, CSS, and the D3 svg-based visualization library. The tests require axes to be generated using the D3 axis property, which automatically generates ticks along the axis. These ticks are required for passing the D3 tests because their positions are used to determine alignment of graphed elements. You will find information about generating axes at https://d3js.org/d3-axis. Required DOM elements are queried on the moment of each test. If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content. We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects.

**User Story #1:** My chart should have a title with a corresponding `id="title"`.

```html
<div class="main">
  <div class="container">
    <div id="title">United States GDP</div> // Title
    <div class="bars"></div>
  </div>
</div>
```

**User Story #2:** My chart should have a `g` element x-axis with a corresponding `id="x-axis"`.

```jsx
// Create x-axis
const xAxis = d3.axisBottom(xScale);
svgCont
  .append("g")
  .call(xAxis)
  .attr("id", "x-axis")
  .attr("transform", "translate(60," + (h + 20) + ")")
  .selectAll(".tick text")
  .attr("class", "tick");
```

**User Story #3:** My chart should have a `g` element y-axis with a corresponding `id="y-axis"`.

```jsx
// Create y-axis
const yAxis = d3.axisLeft(yscale);
svgCont
  .append("g")
  .call(yAxis)
  .attr("id", "y-axis")
  .attr("transform", "translate(60, 20)")
  .selectAll(".tick text")
  .attr("class", "tick");
```

**User Story #4:** Both axes should contain multiple tick labels, each with a corresponding `class="tick"`.

**User Story #5:** My chart should have a `rect` element for each data point with a corresponding `class="bar"` displaying the data.

**User Story #6:** Each `.bar` should have the properties `data-date` and `data-gdp` containing `date` and `GDP` values.

**User Story #7:** The `.bar` elements' `data-date` properties should match the order of the provided data.

**User Story #8:** The `.bar` elements' `data-gdp` properties should match the order of the provided data.

**User Story #9:** Each `.bar` element's height should accurately represent the data's corresponding `GDP`.

**User Story #10:** The `data-date` attribute and its corresponding `.bar` element should align with the corresponding value on the x-axis.

**User Story #11:** The `data-gdp` attribute and its corresponding `.bar` element should align with the corresponding value on the y-axis.

**User Story #12:** I can mouse over an area and see a tooltip with a corresponding `id="tooltip"` which displays more information about the area.

```jsx
// Add mouseover and mouseout event listeners to bars for tooltip
svgCont.selectAll(".bar")
  .on("mouseover", function(event, d) {
    const [x, y] = d3.pointer(event);
    const date = d[0];
    const gdp = d[1];
    tooltip
      .style("opacity", 0.9)
      .html(`${date}<br/>$${gdp} Billion`)
      .attr("data-date", date)
      .style("left", x + "px")
      .style("top", y + "px");
  })
  .on("mouseout", function() {
    tooltip.style("opacity", 0);
  });
```

**User Story #13:** My tooltip should have a `data-date` property that corresponds to the `data-date` of the active area.

Here is the dataset you will need to complete this project: `https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json`

You can build your project by [using this CodePen template](https://codepen.io/pen?template=MJjpwO) and clicking `Save` to create your own pen. Or you can use this CDN link to run the tests in any environment you like: `https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js`.

Once you're done, submit the URL to your working project with all its tests passing.

***HTML Code***

```html
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>United States GDP Bar Chart</title>
  <!-- Include CSS Styles -->
  <style>
    /* CSS Styles */
  </style>
</head>

<body>
  <!-- Main Container -->
  <div class="main">
    <div class="container">
      <!-- Chart Title -->
      <div id="title">United States GDP</div>
      <!-- Chart Container -->
      <div class="bars"></div>
    </div>
  </div>
```

***CSS Code***

```css
* {
  margin: 0;
  padding: 0;
}

.main {
  height: 100vh;
  width: 100vw;
  display: flex;
  align-items: center;
  justify-content: center;
  font-family: serif;
  background-color: #708090;
  background-size: 64px 128px;
}
.main .container {
  height: 560px;
  width: 900px;
  background-color: #fff;
  display: flex;
  flex-direction: column;
  padding: 20px 20px 20px 20px;
  align-self: center;
  position: relative;
}
@media (min-width: 1000px) {
  .main .container {
    box-shadow: 2px 2px 20px;
  }
}
.main .container #title {
  text-align: center;
  font-size: 2.5em;
}
.main .container .bars {
  position: absolute;
  top: 6em;
}

#tooltip {
  display: flex;
  align-items: center;
  justify-content: center;
  position: absolute;
  text-align: center;
  width: 150px;
  height: 50px;
  padding: 2px;
  font: 12px;
  background: lightsteelblue;
  box-shadow: 1px 1px 10px;
  border-radius: 2px;
  pointer-events: none;
}

.overlay {
  position: absolute;
  background: #00008b;
  pointer-events: none;
}

#y-axis path {
  stroke: black;
  stroke-width: 1;
  fill: none;
}

#x-axis path {
  stroke: black;
  stroke-width: 1;
  fill: none;
}

.info {
  font-size: 0.8em;
}
```

***JavaScript(Babel)***

```jsx
import * as d3 from "https://cdn.skypack.dev/d3@7.6.1";

var w = 800,
  h = 400,
  barw = w / 275,
  overlay = d3
    .select(".bars")
    .append("div")
    .attr("class", "overlay")
    .style("opacity", 0),
  tooltip = d3
    .select(".bars")
    .append("div")
    .attr("id", "tooltip")
    .style("opacity", 0),
  svgCont = d3
    .select(".bars")
    .append("svg")
    .attr("width", w + 100)
    .attr("height", h + 60);

d3.json(
  "https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json"
).then((data) => {
  svgCont.append("text").attr("x", 70).attr("y", 11).text("GDP");

  svgCont
    .append("text")
    .attr("x", w / 2 + 120)
    .attr("y", h + 40)
    .text("More Information: http://www.bea.gov/national/pdf/nipaguid.pdf")
    .attr("class", "info");

  var years = data.data.map((item) => {
    var quarter;
    var temp = item[0].substring(5, 7);
    if (temp === "01") {
      quarter = "Q1";
    } else if (temp === "04") {
      quarter = "Q2";
    } else if (temp === "07") {
      quarter = "Q3";
    } else if (temp === "10") {
      quarter = "Q4";
    }
    return item[0].substring(0, 4) + " " + quarter;
  });

  var yearsDate = data.data.map((item) => {
    return new Date(item[0]);
  });

  var tMax = new Date(d3.max(yearsDate));
  tMax.setMonth(tMax.getMonth() + 3);

  var xScale = d3
    .scaleTime()
    .domain([d3.min(yearsDate), tMax])
    .range([0, w]);

  var xAxis = d3.axisBottom(xScale);
  svgCont
    .append("g")
    .call(xAxis)
    .attr("id", "x-axis")
    .attr("transform", "translate(60, 400)");

  var gdp = data.data.map((item) => {
    return item[1];
  });

  var scale = d3
    .scaleLinear()
    .domain([0, d3.max(gdp)])
    .range([0, h]);
  var yscale = d3
    .scaleLinear()
    .domain([0, d3.max(gdp)])
    .range([h, 0]);

  var yAxis = d3.axisLeft(yscale);
  svgCont
    .append("g")
    .call(yAxis)
    .attr("id", "y-axis")
    .attr("transform", "translate(60, 0)");

  d3.select("svg")
    .selectAll("rect")
    .data(gdp)
    .enter()
    .append("rect")
    .attr("data-date", (d, i) => data.data[i][0])
    .attr("data-gdp", (d, i) => data.data[i][1])
    .attr("class", "bar")
    .attr("x", (d, i) => xScale(yearsDate[i]))
    .attr("y", (d) => h - scale(d))
    .attr("width", barw)
    .attr("height", (d) => scale(d))
    .attr("transform", "translate(60,0)")
    .attr("fill", "#5e34eb")
    .attr("index", (d, i) => i)
    .on("mouseover", function (event, d) {
      var i = this.getAttribute("index");

      overlay
        .transition()
        .duration(0)
        .style("width", barw + "px")
        .style("height", scale(d) + "px")
        .style("top", h - scale(d) + "px")
        .style("left", i * barw + "px")
        .style("transform", "translateX(60px)")
        .style("opacity", 0.9);

      tooltip.transition().duration(200).style("opacity", 0.9);

      tooltip
        .html(
          years[i] +
            "<br>" +
            "$" +
            gdp[i].toFixed(1).replace(/(\d)(?=(\d{3})+\.)/g, "$1,") +
            " Billion"
        )
        .attr("data-date", data.data[i][0])
        .style("top", h - 100 + "px")
        .style("left", i * barw + 10 + "px")
        .style("transform", "translateX(60px)");
    })
    .on("mouseout", () => {
      tooltip.transition().duration(200).style("opacity", 0);
      overlay.transition().duration(200).style("opacity", 0);
    });
});
```
