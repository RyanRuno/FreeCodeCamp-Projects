**Objective:** Build an app that is functionally similar to this: [https://scatterplot-graph.freecodecamp.rocks](https://scatterplot-graph.freecodecamp.rocks/).

Fulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.

You can use HTML, JavaScript, CSS, and the D3 svg-based visualization library. The tests require axes to be generated using the D3 axis property, which automatically generates ticks along the axis. These ticks are required for passing the D3 tests because their positions are used to determine alignment of graphed elements. You will find information about generating axes at https://d3js.org/d3-axis. Required DOM elements are queried on the moment of each test. If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content. We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects.

**User Story #1:** I can see a title element that has a corresponding `id="title"`.

```html
<h1>Visualize Data with a Scatterplot Graph</h1>
```

**User Story #2:** I can see an x-axis that has a corresponding `id="x-axis"`.

```jsx
var xAxis = d3.axisBottom(x).tickFormat(d3.timeFormat("%Y"));
```

**User Story #3:** I can see a y-axis that has a corresponding `id="y-axis"`.

```jsx
var yAxis = d3.axisLeft(y).tickFormat(ft);
```

**User Story #4:** I can see dots, that each have a class of `dot`, which represent the data being plotted.

```jsx
.attr("class", "dot")
```

**User Story #5:** Each dot should have the properties `data-xvalue` and `data-yvalue` containing their corresponding `x` and `y` values.

```jsx
.attr("data-xvalue", (d) => { return ft.parse(d.Time); })
.attr("data-yvalue", (d) => { return ft.parse(d.Time); })
```

**User Story #6:** The `data-xvalue` and `data-yvalue` of each dot should be within the range of the actual data and in the correct data format. For `data-xvalue`, integers (full years) or `Date` objects are acceptable for test evaluation. For `data-yvalue` (minutes), use `Date` objects.

```jsx
var ft = d3.timeFormat("%M:%S");
x.domain([slowest, fastest]);
y.domain([0, d3.max(data, (d) => { return d.Place; }) + 1]);
```

**User Story #7:** The `data-xvalue` and its corresponding dot should align with the corresponding point/value on the x-axis.

```jsx
.attr("cx", (d) => { return x(ft.parse(d.Time)); })
```

**User Story #8:** The `data-yvalue` and its corresponding dot should align with the corresponding point/value on the y-axis.

```jsx
.attr("cy", (d) => { return y(d.Place); })
```

**User Story #9:** I can see multiple tick labels on the y-axis with `%M:%S` time format.

```jsx
.tickFormat(ft)
```

**User Story #10:** I can see multiple tick labels on the x-axis that show the year.

```jsx
.tickFormat(d3.timeFormat("%Y"))
```

**User Story #11:** I can see that the range of the x-axis labels are within the range of the actual x-axis data.

```jsx
x.domain([slowest, fastest]);
```

**User Story #12:** I can see that the range of the y-axis labels are within the range of the actual y-axis data.

```jsx
y.domain([0, d3.max(data, (d) => { return d.Place; }) + 1]);
```

**User Story #13:** I can see a legend containing descriptive text that has `id="legend"`.

```jsx
svg.append("text").attr("fill", "red").text("* Doping allegiance");
svg.append("text").attr("fill", "orange").text("* No doping allegiance");
```

**User Story #14:** I can mouse over an area and see a tooltip with a corresponding `id="tooltip"` which displays more information about the area.

```jsx
var tooltip = d3.select("#scatterplot-stats").append("div").attr("class", "tooltip");
on("mouseover", showToolTip)
on("mouseout", hideToolTip)
```

**User Story #15:** My tooltip should have a `data-year` property that corresponds to the `data-xvalue` of the active area.

```jsx
"Year: " + d.Year + "<br/><br/>"
tooltip.style("top", (d3.event.pageY - tipsize.dy - 5) + "px")
```

Here is the dataset you will need to complete this project: `https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json`

[](https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json)

The Coded Dataset

You can build your project by [using this CodePen template](https://codepen.io/pen?template=MJjpwO) and clicking `Save` to create your own pen. Or you can use this CDN link to run the tests in any environment you like: `https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js`

Once you're done, submit the URL to your working project with all its tests passing.

***HTML Code***

```html
<div id="scatterplot-stats">
  <h1>Visualize Data with a Scatterplot Graph</h1>
  <h3>FreeCodeCamp</h3>
</div>
```

***CSS Code:***

```css
body {
 background-color:lightgray;;
}
h1, h3, p{
  text-align:center;
}

#scatterplot-stats {
  text-align: center;
}

.axis {
  fill: none;
  stroke: #3A3A3A;
}

.axis text {
  fill: #000;
  stroke: none;
}

circle {
  stroke: #3A3A3A;
}

.cyclist circle:hover {
  cursor: pointer;
}

.tooltip {
  position: absolute;
  padding: 5px;
  box-sizing: border-box;
  background-color: #000;
  color: #fff;
}

/*
 * Footer
 */
a:link    {color:orangered;  text-decoration:none}
a:visited {color:orangered; text-decoration:none}
a:hover   {color:red; text-decoration:underline}

.tableFooter{
  margin-top: 15px;
}
.footerSvg{
  width: 32px;
}
```

***JavaScript(Babel) Code***

```jsx
(function() {
  var url = "https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/cyclist-data.json";
  
  //our JavaScript section starts and the first thing that happens is that we set the size of the area that we’re going to use for the chart and the margins;
  var margin = { top: 60, left: 60, bottom: 60, right: 90 } 
  var height = 480, width = 780;
  //format the time with minutes and seconds
  var ft = d3.time.format("%M:%S");
  
  //The next section declares the functions linear and scale
  var y = d3.scale.linear().range([0, height]);
  var x = d3.time.scale().range([0, width]);
  
  //The declarations for our two axes are relatively simple
  //show data (nums) under the x-axis line
  var xAxis = d3.svg.axis().scale(x).orient("bottom")
      .ticks(d3.time.seconds, 30)
      .tickFormat(ft);
  //show data (nums) left of the y-axis line
  var yAxis = d3.svg.axis().scale(y).orient("left");
  

/* 
* The next block of code selects the id scatterplot-stats on the web page 
* and appends an svg object to it of the size 
* that we have set up with our width, height and margin’s.
*/
  var svg = d3.select("#scatterplot-stats").append("svg")
      .attr("height", height + margin.top + margin.bottom)
      .attr("width", width + margin.left + margin.right);
  
  svg.append("rect")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .attr("x", 0)
        .attr("y", 0)
        .attr("fill", "white")
        .attr("fill-opacity", 0.8);
  // It also adds a g element that provides a reference point for adding our axes.  
  svg = svg.append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
  
  //declair the tooltip
  var tooltip = d3.select("#scatterplot-stats").append("div")
      .attr("class", "tooltip");
  
 
  /*
  * If doping allegiance make the circle red else make it orange
  */
  function doping(arg) {
    return arg !== "" ? "red" : "orange";
  }
  
  /* 
  * this function is like mouse over. 
  * If we place the mouse over a circle the tooltip is going to show up.
  */
  function showToolTip(d, i) {
    tooltip.style({
      "height": "125px",
      "width": "200px",
      "opacity": 0.9
    });
    var circle = d3.event.target; 
    var tippadding = 5, tipsize = { 
      dx: parseInt(tooltip.style("width")), 
      dy: parseInt(tooltip.style("height")) 
    };
  
    tooltip.style({
        "top": (d3.event.pageY - tipsize.dy - 5) + "px",
        "left": (d3.event.pageX - tipsize.dx - 5) + "px"
      }).html("<span><b>" + d.Name + ": " + d.Nationality + "<br/>" + 
            "Place: " + d.Place + " | Time: " + d.Time + "<br/>" + 
            "Year: " + d.Year + "<br/><br/>" + 
            "Doping: " + d.Doping + "</b></span>");
  }
  
  /* 
  * This function is like mouse out. 
  * If we mouse out then the tooltip is hidding
  */
  function hideToolTip(d, i) {
    tooltip.style({
      "height": 0,
      "width": 0,
      "opacity": 0
    }).html("");
  }
  
  /* 
  * This function is like click. 
  * If we click in the circle we are transfering to another site
  */
  function openEntry(d) {
    if(d.URL) {
      var win = window.open(d.URL, "_blank");
      win.focus();
    }
  }
  
  /* 
  * d3.json takes the variable url and two more parameters
  * if error, then throw it
  * else map the time-date in the horizontal axis and the rank-position in the verticall axis
  */
  d3.json(url, (error, data) => {
    if(error) {
      throw new Error("d3.json error");
    }
    else {
      var fastest = d3.min(data.map((item) => { return ft.parse(item.Time); }));
      var slowest = d3.max(data.map((item) => { return ft.parse(item.Time); }));
      
      x.domain([slowest, fastest]);
      y.domain([1, d3.max(data, (d) => { return d.Place; }) + 1]);
      //Add a "g" element that provides a reference point for adding our axes.
      svg.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height + ")")
          .call(xAxis)
        .append("text") //add text to the axis
          .attr("transform", "translate(" + width + ",-30)")
          .attr("dy", "1.8em")
          .attr("text-anchor", "end")
          .text("Race time for 13.8km");
      
      svg.append("g")
          .attr("class", "y axis")
          .call(yAxis)
        .append("text") //add text to the axis
          .attr("transform", "rotate(-90)")
          .attr("dy", "-0.8em")
          .attr("text-anchor", "end")
          .text("Rank");
      
      /* 
      * we add the cyclists to our scatterplot
      * This block of code creates the cyclists (selectAll(".cyclist")) 
      * and associates each of them with a data set (.data(data)).
      * We then append a circle 
      * with values for x/y position and height/width as configured in our earlier code.
      * we parse the time and the place
      */ 
      var cyclist = svg.selectAll(".cyclist")
          .data(data)
        .enter().append("g")
          .attr("class", "cyclist")
          .attr("x", (d) => { return x(ft.parse(d.Time)); })
          .attr("y", (d) => { return y(d.Place); });
      
      cyclist.append("circle")
          .attr("cx", (d) => { return x(ft.parse(d.Time)); })
          .attr("cy", (d) => { return y(d.Place); })
          .attr("r", 5)
          .attr("fill", (d) => { return doping(d.Doping); })
          //call the functions
          .on("mouseover", showToolTip)
          .on("mouseout", hideToolTip)
          .on("click", openEntry);
      
      //append the text and fix the distance btw the circles and the names
      cyclist.append("text")
          .attr("x", (d) => { return x(ft.parse(d.Time)) + 7; })
          .attr("y", (d) => { return y(d.Place) + 5; })
          .text((d) => { return d.Name; });
      
      //right-bottom explainatory text
      var isDoped = svg.append("g")
          .attr("transform", "translate(" + (width - 150) + "," + (height - 100) + ")")
          .append("text") 
            .attr("x", 10)
            .attr("y", 5)
            .attr("fill", "red")
            .text("* Doping allegiance");;
      var isNotDoped = svg.append("g")
          .attr("transform", "translate(" + (width - 150) + "," + (height - 80) + ")")
          .append("text")
            .attr("x", 10)
            .attr("y", 5)
            .attr("fill", "orange")
            .text("* No doping allegiance");
    } //end of else
    
  });
}());
```
